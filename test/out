
> library-manager@1.0.0 test
> mocha --timeout 10000 --exit test/**/*.test.js

{
  BookForm: [class (anonymous)],
  Data: [class (anonymous)] {
    book: [ [Object], [Object], [Object], [Object], [Object] ],
    loan: [ [Object], [Object], [Object] ],
    patron: [ [Object], [Object], [Object], [Object], [Object] ],
    genre: [ [Object], [Object], [Object], [Object], [Object] ],
    libraryId: [ [Object], [Object], [Object], [Object], [Object] ]
  },
  DOM: [class (anonymous)],
  LoanForm: [class (anonymous)],
  Route: [class (anonymous)],
  PatronForm: [class (anonymous)],
  Validation: [class (anonymous)]
}
syncing database...
PATRONDATA:  [Function (anonymous)]
Executing (default): CREATE TABLE IF NOT EXISTS `Books` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255) NOT NULL, `author` VARCHAR(255) NOT NULL, `genre` VARCHAR(255), `year` INTEGER, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);


  controllers.book.create
Executing (default): PRAGMA INDEX_LIST(`Books`)
Executing (default): CREATE TABLE IF NOT EXISTS `Patrons` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `first_name` VARCHAR(255) NOT NULL, `last_name` VARCHAR(255) NOT NULL, `address` VARCHAR(255) NOT NULL, `email` VARCHAR(255) NOT NULL, `library_id` VARCHAR(255) NOT NULL, `zip_code` INTEGER NOT NULL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, UNIQUE (`email`), UNIQUE (`library_id`));
Executing (default): PRAGMA INDEX_LIST(`Patrons`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_Patrons_1`)
Executing (default): PRAGMA INDEX_INFO(`sqlite_autoindex_Patrons_2`)
Executing (default): CREATE TABLE IF NOT EXISTS `Loans` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `loaned_on` DATETIME NOT NULL, `return_by` DATETIME NOT NULL, `returned_on` DATETIME, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `book_id` INTEGER NOT NULL REFERENCES `Books` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, `patron_id` INTEGER NOT NULL REFERENCES `Patrons` (`id`) ON DELETE NO ACTION ON UPDATE CASCADE);
Executing (default): PRAGMA INDEX_LIST(`Loans`)
sync successful
    ✓ it should create one book when only required attributes are given
    ✓ it should create one book when all attributes are given
    ✓ it should redirect the user to /books after a book is created
    ✓ it should call res.render with prev. data when only a title is given (from validation error)
    ✓ it should call res.render with prev. data when only an author is given (from validation error)
    ✓ it should call res.render with prev. data when neither title or author are given (from validation error)

  controllers.book.delete
    ✓ it should throw an error when a non-existent book deletion is attempted
    ✓ it should delete an existing book
    ✓ it should redirect the user to /books after a book is deleted

  controllers.book.readAll
    ✓ it should call res.render with book/index and a limited/offset books object with pagination configuration
    ✓ it should call res.render with book/index and only an all books object when a page and limit aren't given
    ✓ it should redirect to /books (with pag/lim querystring) when the page is equal to zero
    ✓ it should redirect to /books (with pag/lim querystring) when the page is negative
    ✓ it should redirect to /books (with pag/lim querystring) when the limit is equal to zero
    ✓ it should redirect to /books (with pag/lim querystring) when the limit is negative
    ✓ it should redirect to /books (with pag/lim querystring) when the page undefined
    ✓ it should redirect to /books (with pag/lim querystring) when the limit undefined
    ✓ it should redirect to /books (with pag/lim querystring) when both the page and limit are negative

  controllers.book.readByAttrs
    one book result
      ✓ it should render one searched book by its title
      ✓ it should render one searched book by its author
      ✓ it should render one searched book by its genre
      ✓ it should render one searched book by its year
    many book results
      ✓ it should render many searched books by their title
      ✓ it should render many searched books by their author
      ✓ it should render many searched books by their genre
      ✓ it should render many searched books by their year
    no book results
      ✓ it should render no books
    pagination parameters
      ✓ it should call res.render with book/index and a limited/offset books object with pagination configuration
      ✓ it should call res.render with book/index and only an all books object when a page and limit aren't given
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the page is equal to zero
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the page is negative
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the limit is equal to zero
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the limit is negative
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the page undefined
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when the limit undefined
      ✓ it should redirect to /books/search?q={q}&page={page}&limit={limit} when both the page and limit are negative

  controllers.book.readByPk
    ✓ it should render book/update and pass one book object
    ✓ it should throw an error when a non-existent book is requested

  controllers.book.readDelete
    ✓ it should render book/delete and pass one book object
    ✓ it should throw an error when a non-existent book is requested for deletion

  controllers.book.readNew
    ✓ it should render book/new

  controllers.book.update
    ✓ it should throw an error when a non-existent book update is attempted
    ✓ it should update one book when all attributes are given
    ✓ it should redirect the user to /books after a book is updated
    ✓ it should call res.render with prev. data when only a title is given (from validation error)
    ✓ it should call res.render with prev. data when only an author is given (from validation error)
    ✓ it should call res.render with prev. data when neither title or author are given (from validation error)

  services.book.create
    ✓ it should return a promise
    ✓ it should create one book
    ✓ it should throw an error when an empty title is given
    ✓ it should throw an error when a title property doesn't exist
    ✓ it should throw an error when an empty author is given
    ✓ it should throw an error when an author property doesn't exist
    ✓ it should throw an error when both empty title and author is given
    ✓ it should throw an error when both title and author properties don't exist

  services.book.delete
    ✓ it should return a promise
    ✓ it should return a promise resolving to the Book instance deleted
    ✓ it should delete an existing book

  services.book.readAll
    ✓ it should return a Promise
    ✓ it should return a Promise resolving to an object with a book total
    ✓ it should return a Promise resolving to an object with an array of Book instances
    ✓ it should return all books from the database
    limit and offset
      limit
        ✓ it should return a limit of one book
        ✓ it should return a limit of some books
        ✓ it should return a limit of no books
      offset
        ✓ it should return a limit of one book with an offset greater than zero
        ✓ it should return a limit of some books with an offset greater than zero
        ✓ it should return a limit of no books with an offset ...

  services.book.readByAttrs
    ✓ it should return a promise
    ✓ it should return a Promise resolving to an object with a book total
    ✓ it should return a Promise resolving to an object with an array of searched Book instances
    one book result
      ✓ it should find one book by its title
      ✓ it should find one book by its author
      ✓ it should find one book by its genre
      ✓ it should find one book by its year
    many book results
      ✓ it should find many books by title
      ✓ it should find many books by author
      ✓ it should find many books by genre
      ✓ it should find many books by year
    no book results
      ✓ it should find no books
    limit and offset
      limit
        ✓ it should return a limit of one searched-book
        ✓ it should return a limit of some searched-books
        ✓ it should return a limit of no searched-books
      offset
        ✓ it should return a limit of one searched-book with an offset greater than zero
        ✓ it should return a limit of some searched-books with an offset greater than zero
        ✓ it should return a limit of no books with an offset equal to the searched-books length

  services.book.readByPk
    ✓ create book to find
    ✓ it should return a Promise
    ✓ it should return a Promise resolving to a Book instance
    ✓ it should return null when finding a non-existent book primary key

  services.book.update
    ✓ it should return a promise
    ✓ it should update one book
    ✓ it should throw an error when an empty title is given
    ✓ it should throw an error when an empty author is given
    ✓ it should throw an error when both empty title and author is given

  views.book.delete
    ✓ it should display the title of the book to delete
    ✓ it should display a form with a method of of post
    ✓ it should display a form with an action of /books/:id/delete
    ✓ it should display a button to submit the delete-book form
    ✓ it should have a cancel link that brings the user back to /books/:id/update
    ✓ it should submit the form deleting an existing book (81ms)

  views.book.index.pagination
    ✓ it should render a limited amount of books from pagination parameters
    ✓ it should dynamically render pagination links when pagination parameters are given
    ✓ it should direct the user to /books?page={page+1}&limit={limit} when clicking on a pagination link under non-searced data (58ms)
    ✓ it should direct the user to /books/search?q=${q}&page={page+1}&limit={limit} when clicking on a pagination link under searced data (57ms)
    ✓ it should render no pagination links when pagination parameters aren't given

  views.book.index.search
    search-form
      ✓ it should have a form for finding books
      ✓ it should have a form with get method
      ✓ it should have a form with an action of /books/search
      ✓ it should have a form with input for book-searching
      ✓ it should have a search-form with a button for submitting a search
      ✓ it should set a default page and limit after after submitting a search (48ms)
    one book result
      ✓ it should show one title-searched book (44ms)
      ✓ it should show one author-searched book (40ms)
      ✓ it should show one genre-searched book (43ms)
      ✓ it should show one year-searched book (101ms)
    many book results
      ✓ it should show many title-searched books (67ms)
      ✓ it should show many author-searched books
      ✓ it should show many genre-searched books
      ✓ it should show many year-searched books (41ms)
    no searched-book results
      ✓ it should find no books (45ms)

  views.book.index
    ✓ it should show all books (43ms)
    ✓ it should show one book when all but one books are removed (39ms)
    ✓ it should show no books when all books are removed (47ms)
    ✓ it should direct the user to /books/:id/update when clicking on a book (78ms)
    ✓ it should have an anchor element to bring the user to /books/new (50ms)

  views.book.new
    ✓ it should display a form for creating a new book
    ✓ it should display a form with a post method
    ✓ it should display a form with an action of /books/new
    ✓ it should show fields for creating a new book
    ✓ it should display a button to submit the new-book form
    ✓ it should submit the form, creating a new book (122ms)
    ✓ it should have a cancel link that brings the user back to /books (68ms)
    error validation rendering
      ✓ it should not submit the form and show validation errors when only a title is given for creating a new book
      ✓ it should not submit the form and display the prev. title value after validation errors from creating a new book
      ✓ it should not submit the form and show validation errors when only an author is given for creating a new book (38ms)
      ✓ it should not submit the form and display the prev. author value after validation errors from creating a new book
      ✓ it should not submit the form and show validation errors when neither title nor author is given for creating a new book
      ✓ it should not submit the form and display the prev. genre value after validation errors from creating a new book
      ✓ it should not submit the form and display the prev. year value after validation errors from creating a new book (40ms)

  views.book.update
    ✓ it should display a form for updating a new book
    ✓ it should display a form with a post method
    ✓ it should display a form with an action of /books/:id/update
    ✓ it should display a button to submit the update-book form
    ✓ it should have a cancel link that brings the user back to /books
    ✓ it should have a delete link that brings the user to /books/:id/delete
    ✓ it should submit the form, updating the existing book (43ms)
    ✓ it should shows details of one book
    ✓ it should show a form with an action of /book/:id/update after validation errors occur at least once from updating a book
    error validation rendering
      ✓ it should not submit the form and show validation errors when only a title is given for updating a book
      ✓ it should not submit the form and display the prev. title value after validation errors from updating a book (39ms)
      ✓ it should not submit the form and show validation errors when only an author is given for updating a book
      ✓ it should not submit the form and display the prev. author value after validation errors from updating a book
      ✓ it should not submit the form and show validation errors when neither title nor author is given for updating a book
      ✓ it should not submit the form and display the prev. genre value after validation errors from updating a book
      ✓ it should not submit the form and display the prev. year value after validation errors from updating a book

  controllers.error.global
    ✓ it should render views/error after receiving an error
    ✓ it should set res.status to error.status when it exists
    ✓ it should set res.status to 500 when error.status doesn't exists

  controllers.error.route
    ✓ it should create an error object with a message of 'Page Not Found'
    ✓ it should create an error object with a 404 status code

  views.error
    non-existent route
      1) "before all" hook: start server for "it should display a 404 status"
      2) "after all" hook: stop server for "it should not display the errors callstack"
    non-existent data
      3) "before all" hook: start server for "it should display a 500 status"
      4) "after all" hook: stop server for "it should display the errors callstack"

  views.navigation
    5) "before all" hook: reload in "views.navigation"

  controllers.loan.readAll
    6) "before all" hook: reload for "it should call res.render with loan/index and a limited/offset loans object with pagination configuration"

  controllers.loan.readByPk
    7) "before all" hook: reload for "it should render loan/update and pass one loan object that includes all Book and Patron instances"

  controllers.loan.readReturn
    8) "before all" hook: reload for "it should render loan/return and pass one loan object"

  controllers.loan.update
    9) "before each" hook: reload for "it should throw an error when a non-existent loan update is attempted"

  services.loan.create
    10) "before all" hook: reload for "it should return a promise"

  services.loan.readAll
    11) "before all" hook: reload for "it should return a Promise"

  services.loan.readByPk
    12) "before all" hook: reload for "it should return a Promise"

  services.loan.update
    13) "before all" hook: reload for "it should return a promise"

  views.loan.index
    14) "before all" hook: reload for "it should show all loans"

  views.loan.update
    15) "before each" hook: reload for "it should display a form for updating a new loan"
    16) "after each" hook: close for "it should display a form for updating a new loan"

  controllers.manager.home
    ✓ it should call res.render with index with limited/offset pagination configuration

  views.manager.index
    17) "before all" hook: reload in "views.manager.index"

  controllers.patron.create
    18) "before each" hook: reload for "it should create one patron when all required attributes are given"

  controllers.patron.delete
    19) "before each" hook: fetch first available patron to delete for "it should throw an error when a non-existent patron deletion is attempted"

  controllers.patron.readAll
    20) "before all" hook: reload for "it should call res.render with patron/index and a limited/offset patrons object with pagination configuration"

  controllers.patron.readByAttrs
    21) "before all" hook: reload in "controllers.patron.readByAttrs"

  controllers.patron.readByPk
    22) "before all" hook: reload for "it should render patron/update and pass one patron object"

  controllers.patron.readDelete
    23) "before all" hook: reload for "it should render patron/delete and pass one patron object"

  controllers.patron.readNew
    ✓ it should render patron/new

  controllers.patron.update
    24) "before each" hook: reload for "it should throw an error when a non-existent patron update is attempted"

  services.patron.create
    25) "before all" hook: reload for "it should return a promise"

  services.patron.delete
    26) "before all" hook: reload for "it should return a promise"

  services.patron.readAll
    27) "before all" hook: reload for "it should return a Promise"

  services.patron.readByAttrs
    28) "before all" hook: reload for "it should return a promise"

  services.patron.readByPk
    29) "before all" hook: reload for "it should return a Promise"

  services.patron.update
    30) "before all" hook: reload for "it should return a promise"

  views.patron.delete
    31) "before each" hook for "it should display the name of the patron to delete"
    32) "after each" hook: close for "it should display the name of the patron to delete"

  views.patron.index.pagination
    33) "before all" hook: reload for "it should render a limited amount of patrons from pagination parameters"

  views.patron.index.search
    34) "before all" hook: reload in "views.patron.index.search"

  views.patron.index
    35) "before each" hook: reload for "it should show all patrons"
    36) "after each" hook: close for "it should show all patrons"

  views.patron.new
    37) "before all" hook: load patron database for "it should display a form for creating a new patron"

  views.patron.update
    38) "before all" hook: reload for "it should display a form for updating a new patron"


  163 passing (7s)
  38 failing

  1) views.error
       non-existent route
         "before all" hook: start server for "it should display a 404 status":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/error/views/error.test.js:28:21)
      at processImmediate (node:internal/timers:464:21)

  2) views.error
       non-existent route
         "after all" hook: stop server for "it should not display the errors callstack":
     TypeError: Cannot read property 'close' of undefined
      at Context.<anonymous> (test/error/views/error.test.js:33:17)
      at processImmediate (node:internal/timers:464:21)

  3) views.error
       non-existent data
         "before all" hook: start server for "it should display a 500 status":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/error/views/error.test.js:65:21)
      at processImmediate (node:internal/timers:464:21)

  4) views.error
       non-existent data
         "after all" hook: stop server for "it should display the errors callstack":
     TypeError: Cannot read property 'close' of undefined
      at Context.<anonymous> (test/error/views/error.test.js:70:17)
      at processImmediate (node:internal/timers:464:21)

  5) views.navigation
       "before all" hook: reload in "views.navigation":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/global/views/navigation.test.js:55:19)
      at processImmediate (node:internal/timers:464:21)

  6) controllers.loan.readAll
       "before all" hook: reload for "it should call res.render with loan/index and a limited/offset loans object with pagination configuration":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/controllers/readAll.test.js:25:19)
      at processImmediate (node:internal/timers:464:21)

  7) controllers.loan.readByPk
       "before all" hook: reload for "it should render loan/update and pass one loan object that includes all Book and Patron instances":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/controllers/readByPk.test.js:27:19)
      at processImmediate (node:internal/timers:464:21)

  8) controllers.loan.readReturn
       "before all" hook: reload for "it should render loan/return and pass one loan object":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/controllers/readReturn.test.js:23:19)
      at processImmediate (node:internal/timers:464:21)

  9) controllers.loan.update
       "before each" hook: reload for "it should throw an error when a non-existent loan update is attempted":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/controllers/update.test.js:39:19)
      at processImmediate (node:internal/timers:464:21)

  10) services.loan.create
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/services/create.test.js:22:19)
      at processImmediate (node:internal/timers:464:21)

  11) services.loan.readAll
       "before all" hook: reload for "it should return a Promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/services/readAll.test.js:14:19)
      at processImmediate (node:internal/timers:464:21)

  12) services.loan.readByPk
       "before all" hook: reload for "it should return a Promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/services/readByPk.test.js:20:19)
      at processImmediate (node:internal/timers:464:21)

  13) services.loan.update
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/services/update.test.js:22:19)
      at processImmediate (node:internal/timers:464:21)

  14) views.loan.index
       "before all" hook: reload for "it should show all loans":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/views/index.test.js:26:19)
      at processImmediate (node:internal/timers:464:21)

  15) views.loan.update
       "before each" hook: reload for "it should display a form for updating a new loan":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/loan/views/update.test.js:39:19)
      at processImmediate (node:internal/timers:464:21)

  16) views.loan.update
       "after each" hook: close for "it should display a form for updating a new loan":
     TypeError: Cannot read property 'close' of undefined
      at Context.<anonymous> (test/loan/views/update.test.js:59:15)
      at processImmediate (node:internal/timers:464:21)

  17) views.manager.index
       "before all" hook: reload in "views.manager.index":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/manager/views/index.test.js:20:19)
      at processImmediate (node:internal/timers:464:21)

  18) controllers.patron.create
       "before each" hook: reload for "it should create one patron when all required attributes are given":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/create.test.js:25:19)
      at processImmediate (node:internal/timers:464:21)

  19) controllers.patron.delete
       "before each" hook: fetch first available patron to delete for "it should throw an error when a non-existent patron deletion is attempted":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/delete.test.js:25:19)
      at processImmediate (node:internal/timers:464:21)

  20) controllers.patron.readAll
       "before all" hook: reload for "it should call res.render with patron/index and a limited/offset patrons object with pagination configuration":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/readAll.test.js:24:19)
      at processImmediate (node:internal/timers:464:21)

  21) controllers.patron.readByAttrs
       "before all" hook: reload in "controllers.patron.readByAttrs":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/readByAttrs.test.js:25:19)
      at processImmediate (node:internal/timers:464:21)

  22) controllers.patron.readByPk
       "before all" hook: reload for "it should render patron/update and pass one patron object":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/readByPk.test.js:23:19)
      at processImmediate (node:internal/timers:464:21)

  23) controllers.patron.readDelete
       "before all" hook: reload for "it should render patron/delete and pass one patron object":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/readDelete.test.js:23:19)
      at processImmediate (node:internal/timers:464:21)

  24) controllers.patron.update
       "before each" hook: reload for "it should throw an error when a non-existent patron update is attempted":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/controllers/update.test.js:29:19)
      at processImmediate (node:internal/timers:464:21)

  25) services.patron.create
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/create.test.js:18:19)
      at processImmediate (node:internal/timers:464:21)

  26) services.patron.delete
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/delete.test.js:15:19)
      at processImmediate (node:internal/timers:464:21)

  27) services.patron.readAll
       "before all" hook: reload for "it should return a Promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/readAll.test.js:13:19)
      at processImmediate (node:internal/timers:464:21)

  28) services.patron.readByAttrs
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/readByAttrs.test.js:16:19)
      at processImmediate (node:internal/timers:464:21)

  29) services.patron.readByPk
       "before all" hook: reload for "it should return a Promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/readByPk.test.js:15:19)
      at processImmediate (node:internal/timers:464:21)

  30) services.patron.update
       "before all" hook: reload for "it should return a promise":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/services/update.test.js:18:19)
      at processImmediate (node:internal/timers:464:21)

  31) views.patron.delete
       "before each" hook for "it should display the name of the patron to delete":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/delete.test.js:22:19)
      at processImmediate (node:internal/timers:464:21)

  32) views.patron.delete
       "after each" hook: close for "it should display the name of the patron to delete":
     TypeError: Cannot read property 'close' of undefined
      at Context.<anonymous> (test/patron/views/delete.test.js:31:15)
      at processImmediate (node:internal/timers:464:21)

  33) views.patron.index.pagination
       "before all" hook: reload for "it should render a limited amount of patrons from pagination parameters":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/index.pagination.test.js:24:19)
      at processImmediate (node:internal/timers:464:21)

  34) views.patron.index.search
       "before all" hook: reload in "views.patron.index.search":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/index.search.test.js:30:19)
      at processImmediate (node:internal/timers:464:21)

  35) views.patron.index
       "before each" hook: reload for "it should show all patrons":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/index.test.js:22:19)
      at processImmediate (node:internal/timers:464:21)

  36) views.patron.index
       "after each" hook: close for "it should show all patrons":
     TypeError: Cannot read property 'close' of undefined
      at Context.<anonymous> (test/patron/views/index.test.js:27:15)
      at processImmediate (node:internal/timers:464:21)

  37) views.patron.new
       "before all" hook: load patron database for "it should display a form for creating a new patron":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/new.test.js:22:19)
      at processImmediate (node:internal/timers:464:21)

  38) views.patron.update
       "before all" hook: reload for "it should display a form for updating a new patron":
     TypeError: testOps.loadTestDb is not a function
      at Context.<anonymous> (test/patron/views/update.test.js:24:19)
      at processImmediate (node:internal/timers:464:21)



